[{"C:\\Users\\Achraff\\projects\\store\\src\\index.tsx":"1","C:\\Users\\Achraff\\projects\\store\\src\\reportWebVitals.ts":"2","C:\\Users\\Achraff\\projects\\store\\src\\App.tsx":"3","C:\\Users\\Achraff\\projects\\store\\src\\components\\layouts\\Sidebar.tsx":"4","C:\\Users\\Achraff\\projects\\store\\src\\components\\layouts\\Dashboard.tsx":"5","C:\\Users\\Achraff\\projects\\store\\src\\components\\layouts\\Container.tsx":"6","C:\\Users\\Achraff\\projects\\store\\src\\components\\layouts\\Navbar.tsx":"7","C:\\Users\\Achraff\\projects\\store\\src\\routes.tsx":"8","C:\\Users\\Achraff\\projects\\store\\src\\configureStore.ts":"9","C:\\Users\\Achraff\\projects\\store\\src\\store\\index.ts":"10","C:\\Users\\Achraff\\projects\\store\\src\\utils\\api.ts":"11","C:\\Users\\Achraff\\projects\\store\\src\\views\\Store.tsx":"12","C:\\Users\\Achraff\\projects\\store\\src\\components\\StatisticCard.tsx":"13","C:\\Users\\Achraff\\projects\\store\\src\\views\\Etudiant\\CreateEtudiant.tsx":"14","C:\\Users\\Achraff\\projects\\store\\src\\components\\Etudiant\\EtudiantForm.tsx":"15","C:\\Users\\Achraff\\projects\\store\\src\\store\\etudiants\\sagas.ts":"16","C:\\Users\\Achraff\\projects\\store\\src\\store\\etudiants\\types.ts":"17","C:\\Users\\Achraff\\projects\\store\\src\\store\\etudiants\\actions.ts":"18","C:\\Users\\Achraff\\projects\\store\\src\\store\\etudiants\\reducer.ts":"19","C:\\Users\\Achraff\\projects\\store\\src\\store\\enseignants\\sagas.ts":"20","C:\\Users\\Achraff\\projects\\store\\src\\store\\enseignants\\reducer.ts":"21","C:\\Users\\Achraff\\projects\\store\\src\\store\\enseignants\\types.ts":"22","C:\\Users\\Achraff\\projects\\store\\src\\store\\enseignants\\actions.ts":"23","C:\\Users\\Achraff\\projects\\store\\src\\store\\cadres\\sagas.ts":"24","C:\\Users\\Achraff\\projects\\store\\src\\store\\cadres\\reducer.ts":"25","C:\\Users\\Achraff\\projects\\store\\src\\store\\cadres\\types.ts":"26","C:\\Users\\Achraff\\projects\\store\\src\\store\\cadres\\actions.ts":"27","C:\\Users\\Achraff\\projects\\store\\src\\views\\Etudiant\\ListEtudiant.tsx":"28","C:\\Users\\Achraff\\projects\\store\\src\\components\\Etudiant\\EtudiantList.tsx":"29","C:\\Users\\Achraff\\projects\\store\\src\\views\\Enseignant\\ListEnseignant.tsx":"30","C:\\Users\\Achraff\\projects\\store\\src\\components\\Enseignant\\EnseignantList.tsx":"31","C:\\Users\\Achraff\\projects\\store\\src\\components\\Enseignant\\EnseignantForm.tsx":"32","C:\\Users\\Achraff\\projects\\store\\src\\views\\Cadre\\ListCadre.tsx":"33","C:\\Users\\Achraff\\projects\\store\\src\\components\\Cadre\\CadreList.tsx":"34","C:\\Users\\Achraff\\projects\\store\\src\\components\\Cadre\\CadreForm.tsx":"35","C:\\Users\\Achraff\\projects\\store\\src\\store\\resultats\\reducer.ts":"36","C:\\Users\\Achraff\\projects\\store\\src\\store\\absences\\reducer.ts":"37","C:\\Users\\Achraff\\projects\\store\\src\\store\\resultats\\types.ts":"38","C:\\Users\\Achraff\\projects\\store\\src\\store\\absences\\types.ts":"39","C:\\Users\\Achraff\\projects\\store\\src\\store\\absences\\sagas.ts":"40","C:\\Users\\Achraff\\projects\\store\\src\\store\\resultats\\sagas.ts":"41","C:\\Users\\Achraff\\projects\\store\\src\\store\\resultats\\actions.ts":"42","C:\\Users\\Achraff\\projects\\store\\src\\store\\absences\\actions.ts":"43","C:\\Users\\Achraff\\projects\\store\\src\\views\\Absence\\ListAbsence.tsx":"44","C:\\Users\\Achraff\\projects\\store\\src\\views\\Resultat\\ListResultat.tsx":"45","C:\\Users\\Achraff\\projects\\store\\src\\components\\Absence\\AbsenceForm.tsx":"46","C:\\Users\\Achraff\\projects\\store\\src\\components\\Absence\\AbsenceList.tsx":"47","C:\\Users\\Achraff\\projects\\store\\src\\components\\Resultat\\ResultatForm.tsx":"48","C:\\Users\\Achraff\\projects\\store\\src\\components\\Resultat\\ResultatList.tsx":"49"},{"size":735,"mtime":1607349062010,"results":"50","hashOfConfig":"51"},{"size":425,"mtime":1607274983784,"results":"52","hashOfConfig":"51"},{"size":703,"mtime":1607348052309,"results":"53","hashOfConfig":"51"},{"size":2057,"mtime":1609511121240,"results":"54","hashOfConfig":"51"},{"size":677,"mtime":1609462234855,"results":"55","hashOfConfig":"51"},{"size":602,"mtime":1609461827427,"results":"56","hashOfConfig":"51"},{"size":623,"mtime":1609461692238,"results":"57","hashOfConfig":"51"},{"size":990,"mtime":1609527284603,"results":"58","hashOfConfig":"51"},{"size":1539,"mtime":1607349079422,"results":"59","hashOfConfig":"51"},{"size":1672,"mtime":1609522638578,"results":"60","hashOfConfig":"51"},{"size":512,"mtime":1609791039988,"results":"61","hashOfConfig":"51"},{"size":1473,"mtime":1607456225866,"results":"62","hashOfConfig":"51"},{"size":1366,"mtime":1609545428252,"results":"63","hashOfConfig":"51"},{"size":266,"mtime":1609207786444,"results":"64","hashOfConfig":"51"},{"size":4155,"mtime":1609512204537,"results":"65","hashOfConfig":"51"},{"size":4255,"mtime":1609791098019,"results":"66","hashOfConfig":"51"},{"size":1306,"mtime":1609522032215,"results":"67","hashOfConfig":"51"},{"size":1490,"mtime":1609522043654,"results":"68","hashOfConfig":"51"},{"size":2372,"mtime":1609522022348,"results":"69","hashOfConfig":"51"},{"size":4458,"mtime":1609791112381,"results":"70","hashOfConfig":"51"},{"size":2422,"mtime":1609460223632,"results":"71","hashOfConfig":"51"},{"size":1227,"mtime":1609510577317,"results":"72","hashOfConfig":"51"},{"size":1582,"mtime":1609460227447,"results":"73","hashOfConfig":"51"},{"size":4023,"mtime":1609791117740,"results":"74","hashOfConfig":"51"},{"size":2297,"mtime":1609460485590,"results":"75","hashOfConfig":"51"},{"size":1072,"mtime":1609522266703,"results":"76","hashOfConfig":"51"},{"size":1352,"mtime":1609522259367,"results":"77","hashOfConfig":"51"},{"size":2274,"mtime":1609462052575,"results":"78","hashOfConfig":"51"},{"size":3683,"mtime":1609511526906,"results":"79","hashOfConfig":"51"},{"size":2292,"mtime":1609462071067,"results":"80","hashOfConfig":"51"},{"size":3395,"mtime":1609511515425,"results":"81","hashOfConfig":"51"},{"size":4226,"mtime":1609512192336,"results":"82","hashOfConfig":"51"},{"size":2190,"mtime":1609462081836,"results":"83","hashOfConfig":"51"},{"size":3284,"mtime":1609525718956,"results":"84","hashOfConfig":"51"},{"size":4141,"mtime":1609512176851,"results":"85","hashOfConfig":"51"},{"size":2372,"mtime":1609522130332,"results":"86","hashOfConfig":"51"},{"size":2347,"mtime":1609522218997,"results":"87","hashOfConfig":"51"},{"size":1165,"mtime":1609522140307,"results":"88","hashOfConfig":"51"},{"size":1134,"mtime":1609522215575,"results":"89","hashOfConfig":"51"},{"size":4239,"mtime":1609791140896,"results":"90","hashOfConfig":"51"},{"size":4279,"mtime":1609791124770,"results":"91","hashOfConfig":"51"},{"size":1454,"mtime":1609522127277,"results":"92","hashOfConfig":"51"},{"size":1456,"mtime":1609522232452,"results":"93","hashOfConfig":"51"},{"size":2205,"mtime":1609526235786,"results":"94","hashOfConfig":"51"},{"size":2234,"mtime":1609526245608,"results":"95","hashOfConfig":"51"},{"size":4113,"mtime":1609525728828,"results":"96","hashOfConfig":"51"},{"size":3535,"mtime":1609527855860,"results":"97","hashOfConfig":"51"},{"size":4148,"mtime":1609527072435,"results":"98","hashOfConfig":"51"},{"size":3335,"mtime":1609526334242,"results":"99","hashOfConfig":"51"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},"pkylf2",{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"102"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"102"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115","usedDeprecatedRules":"102"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"102"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"131"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"135"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"102"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"102"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"102"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"102"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"168","usedDeprecatedRules":"102"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"102"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"102"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"102"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"102"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"102"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"190","usedDeprecatedRules":"102"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"102"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"200","messages":"201","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"202","messages":"203","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"102"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"102"},{"filePath":"213","messages":"214","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"215","usedDeprecatedRules":"102"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"102"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"102"},"C:\\Users\\Achraff\\projects\\store\\src\\index.tsx",[],["222","223"],"C:\\Users\\Achraff\\projects\\store\\src\\reportWebVitals.ts",[],"C:\\Users\\Achraff\\projects\\store\\src\\App.tsx",[],"C:\\Users\\Achraff\\projects\\store\\src\\components\\layouts\\Sidebar.tsx",["224","225"],"import React from \"react\";\r\nimport { Layout, Menu, Breadcrumb } from \"antd\";\r\nimport {\r\n  DesktopOutlined,\r\n  BarChartOutlined,\r\n  TeamOutlined,\r\n  UserOutlined,\r\n} from \"@ant-design/icons\";\r\nimport \"../stylesheets/Sidebar.css\";\r\nimport { Link } from \"react-router-dom\";\r\nconst { Sider } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\nexport default class Sidebar extends React.Component {\r\n  state = {\r\n    collapsed: false,\r\n  };\r\n\r\n  onCollapse = (collapsed: boolean) => {\r\n    console.log(collapsed);\r\n    this.setState({ collapsed });\r\n  };\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"resize\", this.resize.bind(this));\r\n    this.resize();\r\n  }\r\n\r\n  resize() {\r\n    this.setState({ collapsed: window.innerWidth <= 760 });\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    window.removeEventListener(\"resize\", this.resize.bind(this));\r\n  }\r\n\r\n  render() {\r\n    const { collapsed } = this.state;\r\n    return (\r\n      <Sider collapsible collapsed={collapsed} onCollapse={this.onCollapse}>\r\n        <div\r\n          className=\"logo\"\r\n          style={{\r\n            textAlign: \"center\",\r\n            marginTop: \"10px\",\r\n            marginBottom: \"5px\",\r\n          }}\r\n        >\r\n          <img\r\n            src=\"/projetSOA.svg\"\r\n            style={{ width: collapsed ? \"50px\" : \"120px\" }}\r\n          />\r\n        </div>\r\n        <Menu theme=\"dark\" defaultSelectedKeys={[\"1\"]} mode=\"inline\">\r\n          <Menu.Item key=\"1\" icon={<TeamOutlined />}>\r\n            <Link to=\"/etudiants\"> Etudiants</Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"2\" icon={<UserOutlined />}>\r\n            <Link to=\"/enseignants\"> Enseignants</Link>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"3\" icon={<DesktopOutlined />}>\r\n            <Link to=\"/cadres\"> Cadres administratifs</Link>\r\n          </Menu.Item>\r\n          <SubMenu key=\"sub1\" icon={<BarChartOutlined />} title=\"Statitiques\">\r\n            <Menu.Item key=\"4\">Absences</Menu.Item>\r\n            <Menu.Item key=\"5\">Résultats</Menu.Item>\r\n          </SubMenu>\r\n        </Menu>\r\n      </Sider>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\Achraff\\projects\\store\\src\\components\\layouts\\Dashboard.tsx",["226"],"import React from \"react\";\r\nimport { Layout, Breadcrumb } from \"antd\";\r\nimport \"../stylesheets/Sidebar.css\";\r\nimport Sidebar from \"./Sidebar\";\r\nimport Container from \"./Container\";\r\nimport Navbar from \"./Navbar\";\r\n\r\nconst { Footer } = Layout;\r\n\r\nexport default class Dashboard extends React.Component {\r\n  render() {\r\n    return (\r\n      <Layout style={{ minHeight: \"100vh\" }}>\r\n        <Sidebar />\r\n        <Layout className=\"site-layout\">\r\n          <Navbar />\r\n          <Container />\r\n          <Footer style={{ textAlign: \"center\" }}>\r\n            Projet SOA ©2021 By Achraf Chaibi & Adel Boushih\r\n          </Footer>\r\n        </Layout>\r\n      </Layout>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\Achraff\\projects\\store\\src\\components\\layouts\\Container.tsx",["227"],"import React from \"react\";\r\nimport { Layout, Breadcrumb } from \"antd\";\r\nimport Routes from \"../../routes\";\r\nconst { Content } = Layout;\r\n\r\nexport default class Dashboard extends React.Component {\r\n  render() {\r\n    return (\r\n      <Content style={{ margin: \"0 16px\", paddingTop: \"30px\" }}>\r\n        {/* <Breadcrumb style={{ margin: \"16px 0\" }}>\r\n          <Breadcrumb.Item>User</Breadcrumb.Item>\r\n          <Breadcrumb.Item>Bill</Breadcrumb.Item>\r\n        </Breadcrumb> */}\r\n        <div style={{ padding: 24, minHeight: 360 }}>\r\n          <Routes />\r\n        </div>\r\n      </Content>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\Achraff\\projects\\store\\src\\components\\layouts\\Navbar.tsx",["228"],"import React from \"react\";\r\nimport { Layout, Space, Avatar, Row, Col } from \"antd\";\r\nimport { UserOutlined } from \"@ant-design/icons\";\r\n\r\nconst { Header } = Layout;\r\n\r\nexport default class Dashboard extends React.Component {\r\n  render() {\r\n    return (\r\n      <Header\r\n        className=\"site-layout-background\"\r\n        style={{ padding: 0, paddingRight: \"35px\" }}\r\n      >\r\n        <Row justify=\"end\">\r\n          <Col>\r\n            <span style={{ marginRight: \"10px\" }}>Administrateur</span>\r\n            <Avatar size=\"large\" icon={<UserOutlined />} />\r\n          </Col>\r\n        </Row>\r\n      </Header>\r\n    );\r\n  }\r\n}\r\n","C:\\Users\\Achraff\\projects\\store\\src\\routes.tsx",[],"C:\\Users\\Achraff\\projects\\store\\src\\configureStore.ts",[],"C:\\Users\\Achraff\\projects\\store\\src\\store\\index.ts",[],"C:\\Users\\Achraff\\projects\\store\\src\\utils\\api.ts",[],"C:\\Users\\Achraff\\projects\\store\\src\\views\\Store.tsx",[],"C:\\Users\\Achraff\\projects\\store\\src\\components\\StatisticCard.tsx",[],["229","230"],"C:\\Users\\Achraff\\projects\\store\\src\\views\\Etudiant\\CreateEtudiant.tsx",["231"],"import React from \"react\";\r\nimport EtudiantForm from \"../../components/Etudiant/EtudiantForm\";\r\nimport { Card } from \"antd\";\r\nconst CreateEtudiant: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <Card></Card>\r\n    </div>\r\n  );\r\n};\r\nexport default CreateEtudiant;\r\n",["232","233"],"C:\\Users\\Achraff\\projects\\store\\src\\components\\Etudiant\\EtudiantForm.tsx",["234","235","236"],"import { storeEtudiant, updateEtudiant } from \"../../store/etudiants/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { EtudiantsState, Etudiant } from \"../../store/etudiants/types\";\r\nimport { ApplicationState } from \"../../store\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Form, Input, Button, Select, Modal } from \"antd\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst layout = {\r\n  labelCol: { span: 4, sm: 6 },\r\n  wrapperCol: { span: 20, sm: 18 },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: { offset: 4, span: 20 },\r\n};\r\ninterface CreateModalProps {\r\n  title: string;\r\n  isModalVisible: boolean;\r\n  handleOk: () => void;\r\n  handleCancel: () => void;\r\n  onRequestFinished: (type: string, message: string) => void;\r\n  selectedEtudiant: Etudiant | undefined;\r\n}\r\n\r\ninterface PropsFromDispatch {\r\n  storeEtudiant: typeof storeEtudiant;\r\n  updateEtudiant: typeof updateEtudiant;\r\n}\r\n\r\ntype AllProps = PropsFromDispatch & CreateModalProps & EtudiantsState;\r\n\r\nconst EtudiantForm = ({\r\n  title,\r\n  isModalVisible,\r\n  handleOk,\r\n  handleCancel,\r\n  storeEtudiant,\r\n  onRequestFinished,\r\n  selectedEtudiant,\r\n  updateEtudiant,\r\n  loading,\r\n}: AllProps) => {\r\n  const [requestSent, setRequestSent] = useState(false);\r\n  const [isCreate, setIsCreate] = useState(true);\r\n  const [form] = Form.useForm();\r\n\r\n  useEffect(() => {\r\n    if (selectedEtudiant) {\r\n      setIsCreate(false);\r\n      form.setFieldsValue(selectedEtudiant);\r\n    } else {\r\n      setIsCreate(true);\r\n      form.resetFields();\r\n    }\r\n  }, [selectedEtudiant]);\r\n\r\n  useEffect(() => {\r\n    if (!loading && requestSent) {\r\n      setRequestSent(false);\r\n      onRequestFinished(\r\n        \"Succès!\",\r\n        isCreate ? \"Un nouveau etudiant a été crée\" : \"Etudiant modifié!\"\r\n      );\r\n    }\r\n  }, [loading]);\r\n\r\n  const onFinish = (values: Etudiant) => {\r\n    setRequestSent(true);\r\n    if (isCreate) storeEtudiant(values);\r\n    else {\r\n      updateEtudiant(values);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      title={title}\r\n      visible={isModalVisible}\r\n      onOk={handleOk}\r\n      onCancel={handleCancel}\r\n      footer={[\r\n        <Button key=\"back\" onClick={handleCancel}>\r\n          Annuler\r\n        </Button>,\r\n        <Button\r\n          key=\"submit\"\r\n          type=\"primary\"\r\n          htmlType=\"submit\"\r\n          form=\"myForm\"\r\n          loading={loading}\r\n        >\r\n          Confirmer\r\n        </Button>,\r\n      ]}\r\n    >\r\n      <Form\r\n        {...layout}\r\n        form={form}\r\n        name=\"control-hooks\"\r\n        onFinish={onFinish}\r\n        id=\"myForm\"\r\n      >\r\n        <Form.Item\r\n          shouldUpdate\r\n          name=\"prenom\"\r\n          label=\"Prénom\"\r\n          rules={[{ required: true }]}\r\n        >\r\n          <Input placeholder=\"Prénom de l'étudiant...\" />\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"nom\" label=\"Nom\" rules={[{ required: true }]}>\r\n          <Input placeholder=\"Nom de l'étudiant...\" />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"email\"\r\n          label=\"Email\"\r\n          rules={[{ required: true, type: \"email\" }]}\r\n        >\r\n          <Input placeholder=\"Nom de l'étudiant...\" type=\"email\" />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"date_naissance\"\r\n          label=\"Date de naissance\"\r\n          rules={[{ required: true }]}\r\n        >\r\n          <Input placeholder=\"Date de naissance\" type=\"date\" />\r\n        </Form.Item>\r\n        <Form.Item name=\"sexe\" label=\"Sexe\" rules={[{ required: true }]}>\r\n          <Select placeholder=\"Selectionner une option\" allowClear>\r\n            <Option value=\"male\">Homme</Option>\r\n            <Option value=\"female\">Femme</Option>\r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item name=\"classe\" label=\"Classe\" rules={[{ required: true }]}>\r\n          <Input placeholder=\"Classe de l'étudiant...\" />\r\n        </Form.Item>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n};\r\nconst mapStateToProps = ({ etudiants }: ApplicationState) => ({\r\n  data: etudiants.data,\r\n  loading: etudiants.loading,\r\n});\r\n\r\nconst mapDispatchToProps = { storeEtudiant, updateEtudiant };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EtudiantForm);\r\n","C:\\Users\\Achraff\\projects\\store\\src\\store\\etudiants\\sagas.ts",[],"C:\\Users\\Achraff\\projects\\store\\src\\store\\etudiants\\types.ts",[],"C:\\Users\\Achraff\\projects\\store\\src\\store\\etudiants\\actions.ts",[],"C:\\Users\\Achraff\\projects\\store\\src\\store\\etudiants\\reducer.ts",["237","238"],"import { Reducer } from \"redux\";\r\nimport { EtudiantsState, EtudiantsActionTypes } from \"./types\";\r\n\r\nexport const initialState: EtudiantsState = {\r\n  data: [],\r\n  errors: undefined,\r\n  etudiant: undefined,\r\n  loading: false,\r\n  query: \"all\",\r\n};\r\n\r\nconst reducer: Reducer<EtudiantsState> = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case EtudiantsActionTypes.FETCH_REQUEST: {\r\n      console.log(\"test2\");\r\n      return { ...state, loading: true, query: action.payload };\r\n    }\r\n    case EtudiantsActionTypes.FETCH_ONE_REQUEST: {\r\n      return { ...state, loading: true };\r\n    }\r\n    case EtudiantsActionTypes.FETCH_ONE_REQUEST_SUCCESS: {\r\n      return { ...state, loading: false, etudiant: action.payload };\r\n    }\r\n    case EtudiantsActionTypes.DELETE_ETUDIANT: {\r\n      return { ...state, loading: true };\r\n    }\r\n    case EtudiantsActionTypes.DELETE_ETUDIANT_SUCCESS: {\r\n      var newData = state.data.slice();\r\n      const elementIndex = newData.findIndex(\r\n        (elt) => elt.elementId === action.payload\r\n      );\r\n      newData.splice(elementIndex, 1);\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        data: newData,\r\n      };\r\n    }\r\n    case EtudiantsActionTypes.UPDATE_ETUDIANT: {\r\n      return { ...state, loading: true };\r\n    }\r\n    case EtudiantsActionTypes.UPDATE_ETUDIANT_SUCCESS: {\r\n      var newData = state.data.slice();\r\n      const elementIndex = newData.findIndex(\r\n        (elt) => elt.elementId === action.payload.etudiantId\r\n      );\r\n      newData[elementIndex] = action.payload;\r\n      newData.splice(elementIndex, 1);\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        data: newData,\r\n      };\r\n    }\r\n    case EtudiantsActionTypes.STORE_ETUDIANT: {\r\n      return { ...state, loading: true };\r\n    }\r\n    case EtudiantsActionTypes.STORE_ETUDIANT_SUCCESS: {\r\n      var newData = state.data.slice();\r\n      newData.unshift(action.payload);\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        data: newData,\r\n      };\r\n    }\r\n    case EtudiantsActionTypes.FETCH_SUCCESS: {\r\n      return { ...state, loading: false, data: action.payload };\r\n    }\r\n    case EtudiantsActionTypes.FETCH_ERROR: {\r\n      return { ...state, loading: false, errors: action.payload };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport { reducer as etudiantsReducer };\r\n","C:\\Users\\Achraff\\projects\\store\\src\\store\\enseignants\\sagas.ts",[],"C:\\Users\\Achraff\\projects\\store\\src\\store\\enseignants\\reducer.ts",["239","240"],"import { Reducer } from \"redux\";\r\nimport { EnseignantsState, EnseignantsActionTypes } from \"./types\";\r\n\r\nexport const initialState: EnseignantsState = {\r\n  data: [],\r\n  errors: undefined,\r\n  enseignant: undefined,\r\n  loading: false,\r\n  query: \"all\",\r\n};\r\n\r\nconst reducer: Reducer<EnseignantsState> = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case EnseignantsActionTypes.FETCH_REQUEST: {\r\n      console.log(\"test2\");\r\n      return { ...state, loading: true, query: action.payload };\r\n    }\r\n    case EnseignantsActionTypes.FETCH_ONE_REQUEST: {\r\n      return { ...state, loading: true };\r\n    }\r\n    case EnseignantsActionTypes.FETCH_ONE_REQUEST_SUCCESS: {\r\n      return { ...state, loading: false, enseignant: action.payload };\r\n    }\r\n    case EnseignantsActionTypes.DELETE_ENSEIGNANT: {\r\n      return { ...state, loading: true };\r\n    }\r\n    case EnseignantsActionTypes.DELETE_ENSEIGNANT_SUCCESS: {\r\n      var newData = state.data.slice();\r\n      const elementIndex = newData.findIndex(\r\n        (elt) => elt.elementId === action.payload\r\n      );\r\n      newData.splice(elementIndex, 1);\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        data: newData,\r\n      };\r\n    }\r\n    case EnseignantsActionTypes.UPDATE_ENSEIGNANT: {\r\n      return { ...state, loading: true };\r\n    }\r\n    case EnseignantsActionTypes.UPDATE_ENSEIGNANT_SUCCESS: {\r\n      var newData = state.data.slice();\r\n      const elementIndex = newData.findIndex(\r\n        (elt) => elt.elementId === action.payload.enseignantId\r\n      );\r\n      newData[elementIndex] = action.payload;\r\n      newData.splice(elementIndex, 1);\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        data: newData,\r\n      };\r\n    }\r\n    case EnseignantsActionTypes.STORE_ENSEIGNANT: {\r\n      return { ...state, loading: true };\r\n    }\r\n    case EnseignantsActionTypes.STORE_ENSEIGNANT_SUCCESS: {\r\n      var newData = state.data.slice();\r\n      newData.unshift(action.payload);\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        data: newData,\r\n      };\r\n    }\r\n    case EnseignantsActionTypes.FETCH_SUCCESS: {\r\n      return { ...state, loading: false, data: action.payload };\r\n    }\r\n    case EnseignantsActionTypes.FETCH_ERROR: {\r\n      return { ...state, loading: false, errors: action.payload };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport { reducer as enseignantsReducer };\r\n","C:\\Users\\Achraff\\projects\\store\\src\\store\\enseignants\\types.ts",[],"C:\\Users\\Achraff\\projects\\store\\src\\store\\enseignants\\actions.ts",[],"C:\\Users\\Achraff\\projects\\store\\src\\store\\cadres\\sagas.ts",[],"C:\\Users\\Achraff\\projects\\store\\src\\store\\cadres\\reducer.ts",["241","242"],"import { Reducer } from \"redux\";\r\nimport { CadresState, CadresActionTypes } from \"./types\";\r\n\r\nexport const initialState: CadresState = {\r\n  data: [],\r\n  errors: undefined,\r\n  cadre: undefined,\r\n  loading: false,\r\n  query: \"all\",\r\n};\r\n\r\nconst reducer: Reducer<CadresState> = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case CadresActionTypes.FETCH_REQUEST: {\r\n      console.log(\"test2\");\r\n      return { ...state, loading: true, query: action.payload };\r\n    }\r\n    case CadresActionTypes.FETCH_ONE_REQUEST: {\r\n      return { ...state, loading: true };\r\n    }\r\n    case CadresActionTypes.FETCH_ONE_REQUEST_SUCCESS: {\r\n      return { ...state, loading: false, cadre: action.payload };\r\n    }\r\n    case CadresActionTypes.DELETE_CADRE: {\r\n      return { ...state, loading: true };\r\n    }\r\n    case CadresActionTypes.DELETE_CADRE_SUCCESS: {\r\n      var newData = state.data.slice();\r\n      const elementIndex = newData.findIndex(\r\n        (elt) => elt.elementId === action.payload\r\n      );\r\n      newData.splice(elementIndex, 1);\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        data: newData,\r\n      };\r\n    }\r\n    case CadresActionTypes.UPDATE_CADRE: {\r\n      return { ...state, loading: true };\r\n    }\r\n    case CadresActionTypes.UPDATE_CADRE_SUCCESS: {\r\n      var newData = state.data.slice();\r\n      const elementIndex = newData.findIndex(\r\n        (elt) => elt.elementId === action.payload.cadreId\r\n      );\r\n      newData[elementIndex] = action.payload;\r\n      newData.splice(elementIndex, 1);\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        data: newData,\r\n      };\r\n    }\r\n    case CadresActionTypes.STORE_CADRE: {\r\n      return { ...state, loading: true };\r\n    }\r\n    case CadresActionTypes.STORE_CADRE_SUCCESS: {\r\n      var newData = state.data.slice();\r\n      newData.unshift(action.payload);\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        data: newData,\r\n      };\r\n    }\r\n    case CadresActionTypes.FETCH_SUCCESS: {\r\n      return { ...state, loading: false, data: action.payload };\r\n    }\r\n    case CadresActionTypes.FETCH_ERROR: {\r\n      return { ...state, loading: false, errors: action.payload };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport { reducer as cadresReducer };\r\n","C:\\Users\\Achraff\\projects\\store\\src\\store\\cadres\\types.ts",[],"C:\\Users\\Achraff\\projects\\store\\src\\store\\cadres\\actions.ts",[],"C:\\Users\\Achraff\\projects\\store\\src\\views\\Etudiant\\ListEtudiant.tsx",["243"],"import React, { useState } from \"react\";\r\nimport EtudiantList from \"../../components/Etudiant/EtudiantList\";\r\nimport { Card } from \"antd\";\r\nimport { Button, Row, Col, notification, Typography } from \"antd\";\r\nimport { UserAddOutlined, SmileOutlined } from \"@ant-design/icons\";\r\n\r\nimport EtudiantForm from \"../../components/Etudiant/EtudiantForm\";\r\nimport { Etudiant } from \"../../store/etudiants/types\";\r\nconst { Text } = Typography;\r\nconst ListEtudiant: React.FC = () => {\r\n  const [isModalVisible, setIsModalVisible] = useState(false);\r\n  const [selectedEtudiant, setSelectedEtudiant] = useState<Etudiant>();\r\n  const [title, setTitle] = useState(\"\");\r\n\r\n  const onRequestFinished = (type: string, message: string) => {\r\n    notification.open({\r\n      message: type,\r\n      description: message,\r\n      icon: <SmileOutlined style={{ color: \"#108ee9\" }} />,\r\n    });\r\n    setIsModalVisible(false);\r\n  };\r\n  const showModal = (create: boolean) => {\r\n    if (create) {\r\n      setTitle(\"Ajouter un nouveau etudiant\");\r\n      setSelectedEtudiant(undefined);\r\n    }\r\n    setIsModalVisible(true);\r\n  };\r\n\r\n  const handleOk = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const handleCancel = () => {\r\n    setIsModalVisible(false);\r\n  };\r\n\r\n  const selectEtudiant = (etudiant: Etudiant) => {\r\n    setSelectedEtudiant(etudiant);\r\n    setTitle(\"Modifier etudiant\");\r\n    showModal(false);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <Row justify=\"space-between\" className=\"mb-2\">\r\n        <Col>\r\n          <h3 className=\"title\">Gestion des étudiant</h3>\r\n        </Col>\r\n        <Col>\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={() => showModal(true)}\r\n            icon={<UserAddOutlined />}\r\n          >\r\n            Ajouter un nouveau etudiant\r\n          </Button>\r\n        </Col>\r\n      </Row>\r\n      <Card>\r\n        <EtudiantList\r\n          selectEtudiant={selectEtudiant}\r\n          onRequestFinished={onRequestFinished}\r\n        />\r\n      </Card>\r\n      <EtudiantForm\r\n        title={title}\r\n        isModalVisible={isModalVisible}\r\n        handleOk={handleOk}\r\n        handleCancel={handleCancel}\r\n        onRequestFinished={onRequestFinished}\r\n        selectedEtudiant={selectedEtudiant}\r\n      />\r\n    </div>\r\n  );\r\n};\r\nexport default ListEtudiant;\r\n","C:\\Users\\Achraff\\projects\\store\\src\\components\\Etudiant\\EtudiantList.tsx",["244","245","246"],"import { Table, Popconfirm, Button, Space } from \"antd\";\r\nimport { EtudiantsState, Etudiant } from \"../../store/etudiants/types\";\r\nimport { fetchRequest, deleteEtudiant } from \"../../store/etudiants/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { ApplicationState } from \"../../store\";\r\nimport {\r\n  DeleteOutlined,\r\n  EditOutlined,\r\n  DownOutlined,\r\n  CheckSquareOutlined,\r\n  AuditOutlined,\r\n} from \"@ant-design/icons\";\r\nimport { Menu, Dropdown, Tooltip } from \"antd\";\r\nimport {} from \"@ant-design/icons\";\r\nimport { useEffect } from \"react\";\r\n\r\n// We can use `typeof` here to map our dispatch types to the props, like so.\r\ninterface PropsFromDispatch {\r\n  fetchRequest: typeof fetchRequest;\r\n  deleteEtudiant: typeof deleteEtudiant;\r\n}\r\ninterface EtudiantListProps {\r\n  selectEtudiant: (etudiant: Etudiant) => void;\r\n  onRequestFinished: (type: string, message: string) => void;\r\n}\r\n\r\ntype AllProps = EtudiantsState & PropsFromDispatch & EtudiantListProps;\r\nconst EtudiantList = ({\r\n  selectEtudiant,\r\n  data,\r\n  loading,\r\n  deleteEtudiant,\r\n  fetchRequest,\r\n  onRequestFinished,\r\n}: AllProps) => {\r\n  const getMenu = (record: Etudiant) => {\r\n    return (\r\n      <Menu>\r\n        <Menu.Item\r\n          key=\"4\"\r\n          icon={<DeleteOutlined />}\r\n          style={{ color: \"#eb4d4b\" }}\r\n        >\r\n          <Popconfirm\r\n            arrowPointAtCenter\r\n            title=\"Etes-vous sûr de supprimer cet Etudiant?\"\r\n            onConfirm={() => confirmDelete(record.id)}\r\n            okText=\"Oui\"\r\n            cancelText=\"Non\"\r\n          >\r\n            Supprimer\r\n          </Popconfirm>\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          key=\"3\"\r\n          icon={<EditOutlined />}\r\n          style={{ color: \"#108ee9\" }}\r\n          onClick={() => selectEtudiant(record)}\r\n        >\r\n          Modifier\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          key=\"1\"\r\n          icon={<CheckSquareOutlined />}\r\n          style={{ color: \"#192a56\" }}\r\n        >\r\n          Marquer comme absent\r\n        </Menu.Item>\r\n        <Menu.Item key=\"2\" icon={<AuditOutlined />}>\r\n          Attribuer une note\r\n        </Menu.Item>\r\n      </Menu>\r\n    );\r\n  };\r\n  const columns = [\r\n    {\r\n      title: \"Nom\",\r\n      dataIndex: \"nom\",\r\n      key: \"nom\",\r\n      render: (text: string) => <a>{text}</a>,\r\n    },\r\n    {\r\n      title: \"Prénom\",\r\n      dataIndex: \"prenom\",\r\n      key: \"prenom\",\r\n    },\r\n    {\r\n      title: \"Date de naissance\",\r\n      dataIndex: \"date_naissance\",\r\n      key: \"date_naissance\",\r\n    },\r\n    {\r\n      title: \"Classe\",\r\n      dataIndex: \"classe\",\r\n      key: \"classe\",\r\n    },\r\n    {\r\n      title: \"Email\",\r\n      key: \"email\",\r\n      dataIndex: \"email\",\r\n    },\r\n    {\r\n      title: \"Sexe\",\r\n      key: \"sexe\",\r\n      render: (text: string, record: any) => (\r\n        <Space size=\"middle\">\r\n          <Dropdown overlay={getMenu(record)} trigger={[\"click\"]}>\r\n            <Button>\r\n              Actions <DownOutlined />\r\n            </Button>\r\n          </Dropdown>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n  const confirmDelete = (id: number) => {\r\n    deleteEtudiant(id);\r\n    onRequestFinished(\"Succès\", \"Etudiant supprimé!\");\r\n  };\r\n  useEffect(() => {\r\n    fetchRequest(\"\");\r\n  }, []);\r\n\r\n  return (\r\n    <Table\r\n      loading={loading}\r\n      columns={columns}\r\n      dataSource={data}\r\n      rowKey={(record) => record.id}\r\n      className=\"responsive-table\"\r\n    />\r\n  );\r\n};\r\nconst mapStateToProps = ({ etudiants }: ApplicationState) => ({\r\n  data: etudiants.data,\r\n  loading: etudiants.loading,\r\n});\r\n\r\nconst mapDispatchToProps = { fetchRequest, deleteEtudiant };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EtudiantList);\r\n","C:\\Users\\Achraff\\projects\\store\\src\\views\\Enseignant\\ListEnseignant.tsx",[],"C:\\Users\\Achraff\\projects\\store\\src\\components\\Enseignant\\EnseignantList.tsx",["247","248","249"],"import { Table, Popconfirm, Button, Space } from \"antd\";\r\nimport { EnseignantsState, Enseignant } from \"../../store/enseignants/types\";\r\nimport {\r\n  fetchRequest,\r\n  deleteEnseignant,\r\n} from \"../../store/enseignants/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { ApplicationState } from \"../../store\";\r\nimport { DeleteOutlined, EditOutlined, DownOutlined } from \"@ant-design/icons\";\r\nimport { Menu, Dropdown, Tooltip } from \"antd\";\r\nimport {} from \"@ant-design/icons\";\r\nimport { useEffect } from \"react\";\r\n\r\n// We can use `typeof` here to map our dispatch types to the props, like so.\r\ninterface PropsFromDispatch {\r\n  fetchRequest: typeof fetchRequest;\r\n  deleteEnseignant: typeof deleteEnseignant;\r\n}\r\ninterface EnseignantListProps {\r\n  selectEnseignant: (enseignant: Enseignant) => void;\r\n  onRequestFinished: (type: string, message: string) => void;\r\n}\r\n\r\ntype AllProps = EnseignantsState & PropsFromDispatch & EnseignantListProps;\r\nconst EnseignantList = ({\r\n  selectEnseignant,\r\n  data,\r\n  loading,\r\n  deleteEnseignant,\r\n  fetchRequest,\r\n  onRequestFinished,\r\n}: AllProps) => {\r\n  const getMenu = (record: Enseignant) => {\r\n    return (\r\n      <Menu>\r\n        <Menu.Item\r\n          key=\"4\"\r\n          icon={<DeleteOutlined />}\r\n          style={{ color: \"#eb4d4b\" }}\r\n        >\r\n          <Popconfirm\r\n            arrowPointAtCenter\r\n            title=\"Etes-vous sûr de supprimer cet Enseignant?\"\r\n            onConfirm={() => confirmDelete(record.id)}\r\n            okText=\"Oui\"\r\n            cancelText=\"Non\"\r\n          >\r\n            Supprimer\r\n          </Popconfirm>\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          key=\"3\"\r\n          icon={<EditOutlined />}\r\n          style={{ color: \"#108ee9\" }}\r\n          onClick={() => selectEnseignant(record)}\r\n        >\r\n          Modifier\r\n        </Menu.Item>\r\n      </Menu>\r\n    );\r\n  };\r\n  const columns = [\r\n    {\r\n      title: \"Nom\",\r\n      dataIndex: \"nom\",\r\n      key: \"nom\",\r\n      render: (text: string) => <a>{text}</a>,\r\n    },\r\n    {\r\n      title: \"Prénom\",\r\n      dataIndex: \"prenom\",\r\n      key: \"prenom\",\r\n    },\r\n    {\r\n      title: \"Date de naissance\",\r\n      dataIndex: \"date_naissance\",\r\n      key: \"date_naissance\",\r\n    },\r\n    {\r\n      title: \"Grade\",\r\n      dataIndex: \"grade\",\r\n      key: \"grade\",\r\n    },\r\n    {\r\n      title: \"Email\",\r\n      key: \"email\",\r\n      dataIndex: \"email\",\r\n    },\r\n    {\r\n      title: \"Sexe\",\r\n      key: \"sexe\",\r\n      render: (text: string, record: any) => (\r\n        <Space size=\"middle\">\r\n          <Dropdown overlay={getMenu(record)} trigger={[\"click\"]}>\r\n            <Button>\r\n              Actions <DownOutlined />\r\n            </Button>\r\n          </Dropdown>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n  const confirmDelete = (id: number) => {\r\n    deleteEnseignant(id);\r\n    onRequestFinished(\"Succès\", \"Enseignant supprimé!\");\r\n  };\r\n  useEffect(() => {\r\n    fetchRequest(\"\");\r\n  }, []);\r\n\r\n  return (\r\n    <Table\r\n      loading={loading}\r\n      columns={columns}\r\n      dataSource={data}\r\n      rowKey={(record) => record.id}\r\n      className=\"responsive-table\"\r\n    />\r\n  );\r\n};\r\nconst mapStateToProps = ({ enseignants }: ApplicationState) => ({\r\n  data: enseignants.data,\r\n  loading: enseignants.loading,\r\n});\r\n\r\nconst mapDispatchToProps = { fetchRequest, deleteEnseignant };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EnseignantList);\r\n","C:\\Users\\Achraff\\projects\\store\\src\\components\\Enseignant\\EnseignantForm.tsx",["250","251","252"],"import {\r\n  storeEnseignant,\r\n  updateEnseignant,\r\n} from \"../../store/enseignants/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { EnseignantsState, Enseignant } from \"../../store/enseignants/types\";\r\nimport { ApplicationState } from \"../../store\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Form, Input, Button, Select, Modal } from \"antd\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst layout = {\r\n  labelCol: { span: 4, sm: 6 },\r\n  wrapperCol: { span: 20, sm: 18 },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: { offset: 4, span: 20 },\r\n};\r\ninterface CreateModalProps {\r\n  title: string;\r\n  isModalVisible: boolean;\r\n  handleOk: () => void;\r\n  handleCancel: () => void;\r\n  onRequestFinished: (type: string, message: string) => void;\r\n  selectedEnseignant: Enseignant | undefined;\r\n}\r\n\r\ninterface PropsFromDispatch {\r\n  storeEnseignant: typeof storeEnseignant;\r\n  updateEnseignant: typeof updateEnseignant;\r\n}\r\n\r\ntype AllProps = PropsFromDispatch & CreateModalProps & EnseignantsState;\r\n\r\nconst EnseignantForm = ({\r\n  title,\r\n  isModalVisible,\r\n  handleOk,\r\n  handleCancel,\r\n  storeEnseignant,\r\n  onRequestFinished,\r\n  selectedEnseignant,\r\n  updateEnseignant,\r\n  loading,\r\n}: AllProps) => {\r\n  const [requestSent, setRequestSent] = useState(false);\r\n  const [isCreate, setIsCreate] = useState(true);\r\n  const [form] = Form.useForm();\r\n\r\n  useEffect(() => {\r\n    if (selectedEnseignant) {\r\n      setIsCreate(false);\r\n      form.setFieldsValue(selectedEnseignant);\r\n    } else {\r\n      setIsCreate(true);\r\n      form.resetFields();\r\n    }\r\n  }, [selectedEnseignant]);\r\n\r\n  useEffect(() => {\r\n    if (!loading && requestSent) {\r\n      setRequestSent(false);\r\n      onRequestFinished(\r\n        \"Succès!\",\r\n        isCreate ? \"Un nouveau enseignant a été crée\" : \"Enseignant modifié!\"\r\n      );\r\n    }\r\n  }, [loading]);\r\n\r\n  const onFinish = (values: Enseignant) => {\r\n    setRequestSent(true);\r\n    if (isCreate) storeEnseignant(values);\r\n    else {\r\n      updateEnseignant(values);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      title={title}\r\n      visible={isModalVisible}\r\n      onOk={handleOk}\r\n      onCancel={handleCancel}\r\n      footer={[\r\n        <Button key=\"back\" onClick={handleCancel}>\r\n          Annuler\r\n        </Button>,\r\n        <Button\r\n          key=\"submit\"\r\n          type=\"primary\"\r\n          htmlType=\"submit\"\r\n          form=\"myForm\"\r\n          loading={loading}\r\n        >\r\n          Confirmer\r\n        </Button>,\r\n      ]}\r\n    >\r\n      <Form\r\n        {...layout}\r\n        form={form}\r\n        name=\"control-hooks\"\r\n        onFinish={onFinish}\r\n        id=\"myForm\"\r\n      >\r\n        <Form.Item\r\n          shouldUpdate\r\n          name=\"prenom\"\r\n          label=\"Prénom\"\r\n          rules={[{ required: true }]}\r\n        >\r\n          <Input placeholder=\"Prénom de l'enseignant...\" />\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"nom\" label=\"Nom\" rules={[{ required: true }]}>\r\n          <Input placeholder=\"Nom de l'enseignant...\" />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"email\"\r\n          label=\"Email\"\r\n          rules={[{ required: true, type: \"email\" }]}\r\n        >\r\n          <Input placeholder=\"Nom de l'enseignant...\" type=\"email\" />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"date_naissance\"\r\n          label=\"Date de naissance\"\r\n          rules={[{ required: true }]}\r\n        >\r\n          <Input placeholder=\"Date de naissance\" type=\"date\" />\r\n        </Form.Item>\r\n        <Form.Item name=\"sexe\" label=\"Sexe\" rules={[{ required: true }]}>\r\n          <Select placeholder=\"Selectionner une option\" allowClear>\r\n            <Option value=\"male\">Homme</Option>\r\n            <Option value=\"female\">Femme</Option>\r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item name=\"grade\" label=\"Grade\" rules={[{ required: true }]}>\r\n          <Input placeholder=\"Grade de l'enseignant...\" />\r\n        </Form.Item>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n};\r\nconst mapStateToProps = ({ enseignants }: ApplicationState) => ({\r\n  data: enseignants.data,\r\n  loading: enseignants.loading,\r\n});\r\n\r\nconst mapDispatchToProps = { storeEnseignant, updateEnseignant };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(EnseignantForm);\r\n","C:\\Users\\Achraff\\projects\\store\\src\\views\\Cadre\\ListCadre.tsx",[],"C:\\Users\\Achraff\\projects\\store\\src\\components\\Cadre\\CadreList.tsx",["253","254","255"],"import { Table, Popconfirm, Button, Space } from \"antd\";\r\nimport { CadresState, Cadre } from \"../../store/cadres/types\";\r\nimport { fetchRequest, deleteCadre } from \"../../store/cadres/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { ApplicationState } from \"../../store\";\r\nimport { DeleteOutlined, EditOutlined, DownOutlined } from \"@ant-design/icons\";\r\nimport { Menu, Dropdown, Tooltip } from \"antd\";\r\nimport {} from \"@ant-design/icons\";\r\nimport { useEffect } from \"react\";\r\n\r\n// We can use `typeof` here to map our dispatch types to the props, like so.\r\ninterface PropsFromDispatch {\r\n  fetchRequest: typeof fetchRequest;\r\n  deleteCadre: typeof deleteCadre;\r\n}\r\ninterface CadreListProps {\r\n  selectCadre: (cadre: Cadre) => void;\r\n  onRequestFinished: (type: string, message: string) => void;\r\n}\r\n\r\ntype AllProps = CadresState & PropsFromDispatch & CadreListProps;\r\nconst CadreList = ({\r\n  selectCadre,\r\n  data,\r\n  loading,\r\n  deleteCadre,\r\n  fetchRequest,\r\n  onRequestFinished,\r\n}: AllProps) => {\r\n  const getMenu = (record: Cadre) => {\r\n    return (\r\n      <Menu>\r\n        <Menu.Item\r\n          key=\"4\"\r\n          icon={<DeleteOutlined />}\r\n          style={{ color: \"#eb4d4b\" }}\r\n        >\r\n          <Popconfirm\r\n            arrowPointAtCenter\r\n            title=\"Etes-vous sûr de supprimer ce cadre administratif?\"\r\n            onConfirm={() => confirmDelete(record.id)}\r\n            okText=\"Oui\"\r\n            cancelText=\"Non\"\r\n          >\r\n            Supprimer\r\n          </Popconfirm>\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          key=\"3\"\r\n          icon={<EditOutlined />}\r\n          style={{ color: \"#108ee9\" }}\r\n          onClick={() => selectCadre(record)}\r\n        >\r\n          Modifier\r\n        </Menu.Item>\r\n      </Menu>\r\n    );\r\n  };\r\n  const columns = [\r\n    {\r\n      title: \"Nom\",\r\n      dataIndex: \"nom\",\r\n      key: \"nom\",\r\n      render: (text: string) => <a>{text}</a>,\r\n    },\r\n    {\r\n      title: \"Prénom\",\r\n      dataIndex: \"prenom\",\r\n      key: \"prenom\",\r\n    },\r\n    {\r\n      title: \"Date de naissance\",\r\n      dataIndex: \"date_naissance\",\r\n      key: \"date_naissance\",\r\n    },\r\n    {\r\n      title: \"Poste\",\r\n      dataIndex: \"poste\",\r\n      key: \"poste\",\r\n    },\r\n    {\r\n      title: \"Email\",\r\n      key: \"email\",\r\n      dataIndex: \"email\",\r\n    },\r\n    {\r\n      title: \"Sexe\",\r\n      key: \"sexe\",\r\n      render: (text: string, record: any) => (\r\n        <Space size=\"middle\">\r\n          <Dropdown overlay={getMenu(record)} trigger={[\"click\"]}>\r\n            <Button>\r\n              Actions <DownOutlined />\r\n            </Button>\r\n          </Dropdown>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n  const confirmDelete = (id: number) => {\r\n    deleteCadre(id);\r\n    onRequestFinished(\"Succès\", \"Cadre administratif supprimé!\");\r\n  };\r\n  useEffect(() => {\r\n    fetchRequest(\"\");\r\n  }, []);\r\n\r\n  return (\r\n    <Table\r\n      loading={loading}\r\n      columns={columns}\r\n      dataSource={data}\r\n      rowKey={(record) => record.id}\r\n      className=\"responsive-table\"\r\n    />\r\n  );\r\n};\r\nconst mapStateToProps = ({ cadres }: ApplicationState) => ({\r\n  data: cadres.data,\r\n  loading: cadres.loading,\r\n});\r\n\r\nconst mapDispatchToProps = { fetchRequest, deleteCadre };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CadreList);\r\n","C:\\Users\\Achraff\\projects\\store\\src\\components\\Cadre\\CadreForm.tsx",["256","257","258"],"import { storeCadre, updateCadre } from \"../../store/cadres/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { CadresState, Cadre } from \"../../store/cadres/types\";\r\nimport { ApplicationState } from \"../../store\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Form, Input, Button, Select, Modal } from \"antd\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst layout = {\r\n  labelCol: { span: 4, sm: 6 },\r\n  wrapperCol: { span: 20, sm: 18 },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: { offset: 4, span: 20 },\r\n};\r\ninterface CreateModalProps {\r\n  title: string;\r\n  isModalVisible: boolean;\r\n  handleOk: () => void;\r\n  handleCancel: () => void;\r\n  onRequestFinished: (type: string, message: string) => void;\r\n  selectedCadre: Cadre | undefined;\r\n}\r\n\r\ninterface PropsFromDispatch {\r\n  storeCadre: typeof storeCadre;\r\n  updateCadre: typeof updateCadre;\r\n}\r\n\r\ntype AllProps = PropsFromDispatch & CreateModalProps & CadresState;\r\n\r\nconst CadreForm = ({\r\n  title,\r\n  isModalVisible,\r\n  handleOk,\r\n  handleCancel,\r\n  storeCadre,\r\n  onRequestFinished,\r\n  selectedCadre,\r\n  updateCadre,\r\n  loading,\r\n}: AllProps) => {\r\n  const [requestSent, setRequestSent] = useState(false);\r\n  const [isCreate, setIsCreate] = useState(true);\r\n  const [form] = Form.useForm();\r\n\r\n  useEffect(() => {\r\n    if (selectedCadre) {\r\n      setIsCreate(false);\r\n      form.setFieldsValue(selectedCadre);\r\n    } else {\r\n      setIsCreate(true);\r\n      form.resetFields();\r\n    }\r\n  }, [selectedCadre]);\r\n\r\n  useEffect(() => {\r\n    if (!loading && requestSent) {\r\n      setRequestSent(false);\r\n      onRequestFinished(\r\n        \"Succès!\",\r\n        isCreate\r\n          ? \"Un nouveau cadre administratif a été crée\"\r\n          : \"Cadre administratif modifié!\"\r\n      );\r\n    }\r\n  }, [loading]);\r\n\r\n  const onFinish = (values: Cadre) => {\r\n    setRequestSent(true);\r\n    if (isCreate) storeCadre(values);\r\n    else {\r\n      updateCadre(values);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      title={title}\r\n      visible={isModalVisible}\r\n      onOk={handleOk}\r\n      onCancel={handleCancel}\r\n      footer={[\r\n        <Button key=\"back\" onClick={handleCancel}>\r\n          Annuler\r\n        </Button>,\r\n        <Button\r\n          key=\"submit\"\r\n          type=\"primary\"\r\n          htmlType=\"submit\"\r\n          form=\"myForm\"\r\n          loading={loading}\r\n        >\r\n          Confirmer\r\n        </Button>,\r\n      ]}\r\n    >\r\n      <Form\r\n        {...layout}\r\n        form={form}\r\n        name=\"control-hooks\"\r\n        onFinish={onFinish}\r\n        id=\"myForm\"\r\n      >\r\n        <Form.Item\r\n          shouldUpdate\r\n          name=\"prenom\"\r\n          label=\"Prénom\"\r\n          rules={[{ required: true }]}\r\n        >\r\n          <Input placeholder=\"Prénom du cadre administratif...\" />\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"nom\" label=\"Nom\" rules={[{ required: true }]}>\r\n          <Input placeholder=\"Nom du cadre administratif...\" />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"email\"\r\n          label=\"Email\"\r\n          rules={[{ required: true, type: \"email\" }]}\r\n        >\r\n          <Input placeholder=\"Nom du cadre administratif...\" type=\"email\" />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"date_naissance\"\r\n          label=\"Date de naissance\"\r\n          rules={[{ required: true }]}\r\n        >\r\n          <Input placeholder=\"Date de naissance\" type=\"date\" />\r\n        </Form.Item>\r\n        <Form.Item name=\"sexe\" label=\"Sexe\" rules={[{ required: true }]}>\r\n          <Select placeholder=\"Selectionner une option\" allowClear>\r\n            <Option value=\"male\">Homme</Option>\r\n            <Option value=\"female\">Femme</Option>\r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item name=\"poste\" label=\"Poste\" rules={[{ required: true }]}>\r\n          <Input placeholder=\"Poste du cadre administratif...\" />\r\n        </Form.Item>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n};\r\nconst mapStateToProps = ({ cadres }: ApplicationState) => ({\r\n  data: cadres.data,\r\n  loading: cadres.loading,\r\n});\r\n\r\nconst mapDispatchToProps = { storeCadre, updateCadre };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(CadreForm);\r\n","C:\\Users\\Achraff\\projects\\store\\src\\store\\resultats\\reducer.ts",["259","260"],"import { Reducer } from \"redux\";\r\nimport { ResultatsState, ResultatsActionTypes } from \"./types\";\r\n\r\nexport const initialState: ResultatsState = {\r\n  data: [],\r\n  errors: undefined,\r\n  resultat: undefined,\r\n  loading: false,\r\n  query: \"all\",\r\n};\r\n\r\nconst reducer: Reducer<ResultatsState> = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case ResultatsActionTypes.FETCH_REQUEST: {\r\n      console.log(\"test2\");\r\n      return { ...state, loading: true, query: action.payload };\r\n    }\r\n    case ResultatsActionTypes.FETCH_ONE_REQUEST: {\r\n      return { ...state, loading: true };\r\n    }\r\n    case ResultatsActionTypes.FETCH_ONE_REQUEST_SUCCESS: {\r\n      return { ...state, loading: false, resultat: action.payload };\r\n    }\r\n    case ResultatsActionTypes.DELETE_RESULTAT: {\r\n      return { ...state, loading: true };\r\n    }\r\n    case ResultatsActionTypes.DELETE_RESULTAT_SUCCESS: {\r\n      var newData = state.data.slice();\r\n      const elementIndex = newData.findIndex(\r\n        (elt) => elt.elementId === action.payload\r\n      );\r\n      newData.splice(elementIndex, 1);\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        data: newData,\r\n      };\r\n    }\r\n    case ResultatsActionTypes.UPDATE_RESULTAT: {\r\n      return { ...state, loading: true };\r\n    }\r\n    case ResultatsActionTypes.UPDATE_RESULTAT_SUCCESS: {\r\n      var newData = state.data.slice();\r\n      const elementIndex = newData.findIndex(\r\n        (elt) => elt.elementId === action.payload.resultatId\r\n      );\r\n      newData[elementIndex] = action.payload;\r\n      newData.splice(elementIndex, 1);\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        data: newData,\r\n      };\r\n    }\r\n    case ResultatsActionTypes.STORE_RESULTAT: {\r\n      return { ...state, loading: true };\r\n    }\r\n    case ResultatsActionTypes.STORE_RESULTAT_SUCCESS: {\r\n      var newData = state.data.slice();\r\n      newData.unshift(action.payload);\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        data: newData,\r\n      };\r\n    }\r\n    case ResultatsActionTypes.FETCH_SUCCESS: {\r\n      return { ...state, loading: false, data: action.payload };\r\n    }\r\n    case ResultatsActionTypes.FETCH_ERROR: {\r\n      return { ...state, loading: false, errors: action.payload };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport { reducer as resultatsReducer };\r\n","C:\\Users\\Achraff\\projects\\store\\src\\store\\absences\\reducer.ts",["261","262"],"import { Reducer } from \"redux\";\r\nimport { AbsencesState, AbsencesActionTypes } from \"./types\";\r\n\r\nexport const initialState: AbsencesState = {\r\n  data: [],\r\n  errors: undefined,\r\n  absence: undefined,\r\n  loading: false,\r\n  query: \"all\",\r\n};\r\n\r\nconst reducer: Reducer<AbsencesState> = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case AbsencesActionTypes.FETCH_REQUEST: {\r\n      console.log(\"test2\");\r\n      return { ...state, loading: true, query: action.payload };\r\n    }\r\n    case AbsencesActionTypes.FETCH_ONE_REQUEST: {\r\n      return { ...state, loading: true };\r\n    }\r\n    case AbsencesActionTypes.FETCH_ONE_REQUEST_SUCCESS: {\r\n      return { ...state, loading: false, absence: action.payload };\r\n    }\r\n    case AbsencesActionTypes.DELETE_ABSENCE: {\r\n      return { ...state, loading: true };\r\n    }\r\n    case AbsencesActionTypes.DELETE_ABSENCE_SUCCESS: {\r\n      var newData = state.data.slice();\r\n      const elementIndex = newData.findIndex(\r\n        (elt) => elt.elementId === action.payload\r\n      );\r\n      newData.splice(elementIndex, 1);\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        data: newData,\r\n      };\r\n    }\r\n    case AbsencesActionTypes.UPDATE_ABSENCE: {\r\n      return { ...state, loading: true };\r\n    }\r\n    case AbsencesActionTypes.UPDATE_ABSENCE_SUCCESS: {\r\n      var newData = state.data.slice();\r\n      const elementIndex = newData.findIndex(\r\n        (elt) => elt.elementId === action.payload.absenceId\r\n      );\r\n      newData[elementIndex] = action.payload;\r\n      newData.splice(elementIndex, 1);\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        data: newData,\r\n      };\r\n    }\r\n    case AbsencesActionTypes.STORE_ABSENCE: {\r\n      return { ...state, loading: true };\r\n    }\r\n    case AbsencesActionTypes.STORE_ABSENCE_SUCCESS: {\r\n      var newData = state.data.slice();\r\n      newData.unshift(action.payload);\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        data: newData,\r\n      };\r\n    }\r\n    case AbsencesActionTypes.FETCH_SUCCESS: {\r\n      return { ...state, loading: false, data: action.payload };\r\n    }\r\n    case AbsencesActionTypes.FETCH_ERROR: {\r\n      return { ...state, loading: false, errors: action.payload };\r\n    }\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nexport { reducer as absencesReducer };\r\n","C:\\Users\\Achraff\\projects\\store\\src\\store\\resultats\\types.ts",[],"C:\\Users\\Achraff\\projects\\store\\src\\store\\absences\\types.ts",[],"C:\\Users\\Achraff\\projects\\store\\src\\store\\absences\\sagas.ts",[],"C:\\Users\\Achraff\\projects\\store\\src\\store\\resultats\\sagas.ts",[],"C:\\Users\\Achraff\\projects\\store\\src\\store\\resultats\\actions.ts",[],"C:\\Users\\Achraff\\projects\\store\\src\\store\\absences\\actions.ts",[],"C:\\Users\\Achraff\\projects\\store\\src\\views\\Absence\\ListAbsence.tsx",[],"C:\\Users\\Achraff\\projects\\store\\src\\views\\Resultat\\ListResultat.tsx",[],"C:\\Users\\Achraff\\projects\\store\\src\\components\\Absence\\AbsenceForm.tsx",["263","264","265"],"import { storeAbsence, updateAbsence } from \"../../store/absences/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { AbsencesState, Absence } from \"../../store/absences/types\";\r\nimport { ApplicationState } from \"../../store\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Form, Input, Button, Select, Modal } from \"antd\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst layout = {\r\n  labelCol: { span: 4, sm: 6 },\r\n  wrapperCol: { span: 20, sm: 18 },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: { offset: 4, span: 20 },\r\n};\r\ninterface CreateModalProps {\r\n  title: string;\r\n  isModalVisible: boolean;\r\n  handleOk: () => void;\r\n  handleCancel: () => void;\r\n  onRequestFinished: (type: string, message: string) => void;\r\n  selectedAbsence: Absence | undefined;\r\n}\r\n\r\ninterface PropsFromDispatch {\r\n  storeAbsence: typeof storeAbsence;\r\n  updateAbsence: typeof updateAbsence;\r\n}\r\n\r\ntype AllProps = PropsFromDispatch & CreateModalProps & AbsencesState;\r\n\r\nconst AbsenceForm = ({\r\n  title,\r\n  isModalVisible,\r\n  handleOk,\r\n  handleCancel,\r\n  storeAbsence,\r\n  onRequestFinished,\r\n  selectedAbsence,\r\n  updateAbsence,\r\n  loading,\r\n}: AllProps) => {\r\n  const [requestSent, setRequestSent] = useState(false);\r\n  const [isCreate, setIsCreate] = useState(true);\r\n  const [form] = Form.useForm();\r\n\r\n  useEffect(() => {\r\n    if (selectedAbsence) {\r\n      setIsCreate(false);\r\n      form.setFieldsValue(selectedAbsence);\r\n    } else {\r\n      setIsCreate(true);\r\n      form.resetFields();\r\n    }\r\n  }, [selectedAbsence]);\r\n\r\n  useEffect(() => {\r\n    if (!loading && requestSent) {\r\n      setRequestSent(false);\r\n      onRequestFinished(\r\n        \"Succès!\",\r\n        isCreate ? \"Un nouveau absence a été crée\" : \"Absence modifié!\"\r\n      );\r\n    }\r\n  }, [loading]);\r\n\r\n  const onFinish = (values: Absence) => {\r\n    setRequestSent(true);\r\n    if (isCreate) storeAbsence(values);\r\n    else {\r\n      updateAbsence(values);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      title={title}\r\n      visible={isModalVisible}\r\n      onOk={handleOk}\r\n      onCancel={handleCancel}\r\n      footer={[\r\n        <Button key=\"back\" onClick={handleCancel}>\r\n          Annuler\r\n        </Button>,\r\n        <Button\r\n          key=\"submit\"\r\n          type=\"primary\"\r\n          htmlType=\"submit\"\r\n          form=\"myForm\"\r\n          loading={loading}\r\n        >\r\n          Confirmer\r\n        </Button>,\r\n      ]}\r\n    >\r\n      <Form\r\n        {...layout}\r\n        form={form}\r\n        name=\"control-hooks\"\r\n        onFinish={onFinish}\r\n        id=\"myForm\"\r\n      >\r\n        <Form.Item\r\n          shouldUpdate\r\n          name=\"prenom\"\r\n          label=\"Prénom\"\r\n          rules={[{ required: true }]}\r\n        >\r\n          <Input placeholder=\"Prénom de l'absence...\" />\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"nom\" label=\"Nom\" rules={[{ required: true }]}>\r\n          <Input placeholder=\"Nom de l'absence...\" />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"email\"\r\n          label=\"Email\"\r\n          rules={[{ required: true, type: \"email\" }]}\r\n        >\r\n          <Input placeholder=\"Nom de l'absence...\" type=\"email\" />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"date_naissance\"\r\n          label=\"Date de naissance\"\r\n          rules={[{ required: true }]}\r\n        >\r\n          <Input placeholder=\"Date de naissance\" type=\"date\" />\r\n        </Form.Item>\r\n        <Form.Item name=\"sexe\" label=\"Sexe\" rules={[{ required: true }]}>\r\n          <Select placeholder=\"Selectionner une option\" allowClear>\r\n            <Option value=\"male\">Homme</Option>\r\n            <Option value=\"female\">Femme</Option>\r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item name=\"grade\" label=\"Grade\" rules={[{ required: true }]}>\r\n          <Input placeholder=\"Grade de l'absence...\" />\r\n        </Form.Item>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n};\r\nconst mapStateToProps = ({ absences }: ApplicationState) => ({\r\n  data: absences.data,\r\n  loading: absences.loading,\r\n});\r\n\r\nconst mapDispatchToProps = { storeAbsence, updateAbsence };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AbsenceForm);\r\n","C:\\Users\\Achraff\\projects\\store\\src\\components\\Absence\\AbsenceList.tsx",["266","267","268","269"],"import { Table, Popconfirm, Button, Space } from \"antd\";\r\nimport { AbsencesState, Absence } from \"../../store/absences/types\";\r\nimport { fetchRequest, deleteAbsence } from \"../../store/absences/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { ApplicationState } from \"../../store\";\r\nimport { DeleteOutlined, EditOutlined, DownOutlined } from \"@ant-design/icons\";\r\nimport { Menu, Dropdown, Tooltip } from \"antd\";\r\nimport {} from \"@ant-design/icons\";\r\nimport { useEffect } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\n// We can use `typeof` here to map our dispatch types to the props, like so.\r\ninterface PropsFromDispatch {\r\n  fetchRequest: typeof fetchRequest;\r\n  deleteAbsence: typeof deleteAbsence;\r\n}\r\ninterface AbsenceListProps {\r\n  selectAbsence: (absence: Absence) => void;\r\n  onRequestFinished: (type: string, message: string) => void;\r\n}\r\ninterface ParamTypes {\r\n  id_etudiant: Record<string, string | undefined>;\r\n}\r\ntype AllProps = AbsencesState & PropsFromDispatch & AbsenceListProps;\r\nconst AbsenceList = ({\r\n  selectAbsence,\r\n  data,\r\n  loading,\r\n  deleteAbsence,\r\n  fetchRequest,\r\n  onRequestFinished,\r\n}: AllProps) => {\r\n  let { id_etudiant } = useParams<Record<string, string | undefined>>();\r\n\r\n  const getMenu = (record: Absence) => {\r\n    return (\r\n      <Menu>\r\n        <Menu.Item\r\n          key=\"4\"\r\n          icon={<DeleteOutlined />}\r\n          style={{ color: \"#eb4d4b\" }}\r\n        >\r\n          <Popconfirm\r\n            arrowPointAtCenter\r\n            title=\"Etes-vous sûr de supprimer cet Absence?\"\r\n            onConfirm={() => confirmDelete(record.id)}\r\n            okText=\"Oui\"\r\n            cancelText=\"Non\"\r\n          >\r\n            Supprimer\r\n          </Popconfirm>\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          key=\"3\"\r\n          icon={<EditOutlined />}\r\n          style={{ color: \"#108ee9\" }}\r\n          onClick={() => selectAbsence(record)}\r\n        >\r\n          Modifier\r\n        </Menu.Item>\r\n      </Menu>\r\n    );\r\n  };\r\n  const columns = [\r\n    {\r\n      title: \"Nom\",\r\n      dataIndex: \"nom\",\r\n      key: \"nom\",\r\n      render: (text: string) => <a>{text}</a>,\r\n    },\r\n    {\r\n      title: \"Prénom\",\r\n      dataIndex: \"prenom\",\r\n      key: \"prenom\",\r\n    },\r\n    {\r\n      title: \"Date de naissance\",\r\n      dataIndex: \"date_naissance\",\r\n      key: \"date_naissance\",\r\n    },\r\n    {\r\n      title: \"Grade\",\r\n      dataIndex: \"grade\",\r\n      key: \"grade\",\r\n    },\r\n    {\r\n      title: \"Email\",\r\n      key: \"email\",\r\n      dataIndex: \"email\",\r\n    },\r\n    {\r\n      title: \"Sexe\",\r\n      key: \"sexe\",\r\n      render: (text: string, record: any) => (\r\n        <Space size=\"middle\">\r\n          <Dropdown overlay={getMenu(record)} trigger={[\"click\"]}>\r\n            <Button>\r\n              Actions <DownOutlined />\r\n            </Button>\r\n          </Dropdown>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n  const confirmDelete = (id: number) => {\r\n    deleteAbsence(id);\r\n    onRequestFinished(\"Succès\", \"Absence supprimé!\");\r\n  };\r\n  useEffect(() => {\r\n    if (id_etudiant) fetchRequest(id_etudiant);\r\n  }, []);\r\n\r\n  return (\r\n    <Table\r\n      loading={loading}\r\n      columns={columns}\r\n      dataSource={data}\r\n      rowKey={(record) => record.id}\r\n      className=\"responsive-table\"\r\n    />\r\n  );\r\n};\r\nconst mapStateToProps = ({ absences }: ApplicationState) => ({\r\n  data: absences.data,\r\n  loading: absences.loading,\r\n});\r\n\r\nconst mapDispatchToProps = { fetchRequest, deleteAbsence };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(AbsenceList);\r\n","C:\\Users\\Achraff\\projects\\store\\src\\components\\Resultat\\ResultatForm.tsx",["270","271","272"],"import { storeResultat, updateResultat } from \"../../store/resultats/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { ResultatsState, Resultat } from \"../../store/resultats/types\";\r\nimport { ApplicationState } from \"../../store\";\r\nimport { useEffect, useState } from \"react\";\r\nimport { Form, Input, Button, Select, Modal } from \"antd\";\r\n\r\nconst { Option } = Select;\r\n\r\nconst layout = {\r\n  labelCol: { span: 4, sm: 6 },\r\n  wrapperCol: { span: 20, sm: 18 },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: { offset: 4, span: 20 },\r\n};\r\ninterface CreateModalProps {\r\n  title: string;\r\n  isModalVisible: boolean;\r\n  handleOk: () => void;\r\n  handleCancel: () => void;\r\n  onRequestFinished: (type: string, message: string) => void;\r\n  selectedResultat: Resultat | undefined;\r\n}\r\n\r\ninterface PropsFromDispatch {\r\n  storeResultat: typeof storeResultat;\r\n  updateResultat: typeof updateResultat;\r\n}\r\n\r\ntype AllProps = PropsFromDispatch & CreateModalProps & ResultatsState;\r\n\r\nconst ResultatForm = ({\r\n  title,\r\n  isModalVisible,\r\n  handleOk,\r\n  handleCancel,\r\n  storeResultat,\r\n  onRequestFinished,\r\n  selectedResultat,\r\n  updateResultat,\r\n  loading,\r\n}: AllProps) => {\r\n  const [requestSent, setRequestSent] = useState(false);\r\n  const [isCreate, setIsCreate] = useState(true);\r\n  const [form] = Form.useForm();\r\n\r\n  useEffect(() => {\r\n    if (selectedResultat) {\r\n      setIsCreate(false);\r\n      form.setFieldsValue(selectedResultat);\r\n    } else {\r\n      setIsCreate(true);\r\n      form.resetFields();\r\n    }\r\n  }, [selectedResultat]);\r\n\r\n  useEffect(() => {\r\n    if (!loading && requestSent) {\r\n      setRequestSent(false);\r\n      onRequestFinished(\r\n        \"Succès!\",\r\n        isCreate ? \"Un nouveau resultat a été crée\" : \"Resultat modifié!\"\r\n      );\r\n    }\r\n  }, [loading]);\r\n\r\n  const onFinish = (values: Resultat) => {\r\n    setRequestSent(true);\r\n    if (isCreate) storeResultat(values);\r\n    else {\r\n      updateResultat(values);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      title={title}\r\n      visible={isModalVisible}\r\n      onOk={handleOk}\r\n      onCancel={handleCancel}\r\n      footer={[\r\n        <Button key=\"back\" onClick={handleCancel}>\r\n          Annuler\r\n        </Button>,\r\n        <Button\r\n          key=\"submit\"\r\n          type=\"primary\"\r\n          htmlType=\"submit\"\r\n          form=\"myForm\"\r\n          loading={loading}\r\n        >\r\n          Confirmer\r\n        </Button>,\r\n      ]}\r\n    >\r\n      <Form\r\n        {...layout}\r\n        form={form}\r\n        name=\"control-hooks\"\r\n        onFinish={onFinish}\r\n        id=\"myForm\"\r\n      >\r\n        <Form.Item\r\n          shouldUpdate\r\n          name=\"prenom\"\r\n          label=\"Prénom\"\r\n          rules={[{ required: true }]}\r\n        >\r\n          <Input placeholder=\"Prénom de l'resultat...\" />\r\n        </Form.Item>\r\n\r\n        <Form.Item name=\"nom\" label=\"Nom\" rules={[{ required: true }]}>\r\n          <Input placeholder=\"Nom de l'resultat...\" />\r\n        </Form.Item>\r\n\r\n        <Form.Item\r\n          name=\"email\"\r\n          label=\"Email\"\r\n          rules={[{ required: true, type: \"email\" }]}\r\n        >\r\n          <Input placeholder=\"Nom de l'resultat...\" type=\"email\" />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"date_naissance\"\r\n          label=\"Date de naissance\"\r\n          rules={[{ required: true }]}\r\n        >\r\n          <Input placeholder=\"Date de naissance\" type=\"date\" />\r\n        </Form.Item>\r\n        <Form.Item name=\"sexe\" label=\"Sexe\" rules={[{ required: true }]}>\r\n          <Select placeholder=\"Selectionner une option\" allowClear>\r\n            <Option value=\"male\">Homme</Option>\r\n            <Option value=\"female\">Femme</Option>\r\n          </Select>\r\n        </Form.Item>\r\n        <Form.Item name=\"grade\" label=\"Grade\" rules={[{ required: true }]}>\r\n          <Input placeholder=\"Grade de l'resultat...\" />\r\n        </Form.Item>\r\n      </Form>\r\n    </Modal>\r\n  );\r\n};\r\nconst mapStateToProps = ({ resultats }: ApplicationState) => ({\r\n  data: resultats.data,\r\n  loading: resultats.loading,\r\n});\r\n\r\nconst mapDispatchToProps = { storeResultat, updateResultat };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ResultatForm);\r\n","C:\\Users\\Achraff\\projects\\store\\src\\components\\Resultat\\ResultatList.tsx",["273","274","275"],"import { Table, Popconfirm, Button, Space } from \"antd\";\r\nimport { ResultatsState, Resultat } from \"../../store/resultats/types\";\r\nimport { fetchRequest, deleteResultat } from \"../../store/resultats/actions\";\r\nimport { connect } from \"react-redux\";\r\nimport { ApplicationState } from \"../../store\";\r\nimport { DeleteOutlined, EditOutlined, DownOutlined } from \"@ant-design/icons\";\r\nimport { Menu, Dropdown, Tooltip } from \"antd\";\r\nimport {} from \"@ant-design/icons\";\r\nimport { useEffect } from \"react\";\r\n\r\n// We can use `typeof` here to map our dispatch types to the props, like so.\r\ninterface PropsFromDispatch {\r\n  fetchRequest: typeof fetchRequest;\r\n  deleteResultat: typeof deleteResultat;\r\n}\r\ninterface ResultatListProps {\r\n  selectResultat: (resultat: Resultat) => void;\r\n  onRequestFinished: (type: string, message: string) => void;\r\n}\r\n\r\ntype AllProps = ResultatsState & PropsFromDispatch & ResultatListProps;\r\nconst ResultatList = ({\r\n  selectResultat,\r\n  data,\r\n  loading,\r\n  deleteResultat,\r\n  fetchRequest,\r\n  onRequestFinished,\r\n}: AllProps) => {\r\n  const getMenu = (record: Resultat) => {\r\n    return (\r\n      <Menu>\r\n        <Menu.Item\r\n          key=\"4\"\r\n          icon={<DeleteOutlined />}\r\n          style={{ color: \"#eb4d4b\" }}\r\n        >\r\n          <Popconfirm\r\n            arrowPointAtCenter\r\n            title=\"Etes-vous sûr de supprimer cet Resultat?\"\r\n            onConfirm={() => confirmDelete(record.id)}\r\n            okText=\"Oui\"\r\n            cancelText=\"Non\"\r\n          >\r\n            Supprimer\r\n          </Popconfirm>\r\n        </Menu.Item>\r\n        <Menu.Item\r\n          key=\"3\"\r\n          icon={<EditOutlined />}\r\n          style={{ color: \"#108ee9\" }}\r\n          onClick={() => selectResultat(record)}\r\n        >\r\n          Modifier\r\n        </Menu.Item>\r\n      </Menu>\r\n    );\r\n  };\r\n  const columns = [\r\n    {\r\n      title: \"Nom\",\r\n      dataIndex: \"nom\",\r\n      key: \"nom\",\r\n      render: (text: string) => <a>{text}</a>,\r\n    },\r\n    {\r\n      title: \"Prénom\",\r\n      dataIndex: \"prenom\",\r\n      key: \"prenom\",\r\n    },\r\n    {\r\n      title: \"Date de naissance\",\r\n      dataIndex: \"date_naissance\",\r\n      key: \"date_naissance\",\r\n    },\r\n    {\r\n      title: \"Grade\",\r\n      dataIndex: \"grade\",\r\n      key: \"grade\",\r\n    },\r\n    {\r\n      title: \"Email\",\r\n      key: \"email\",\r\n      dataIndex: \"email\",\r\n    },\r\n    {\r\n      title: \"Sexe\",\r\n      key: \"sexe\",\r\n      render: (text: string, record: any) => (\r\n        <Space size=\"middle\">\r\n          <Dropdown overlay={getMenu(record)} trigger={[\"click\"]}>\r\n            <Button>\r\n              Actions <DownOutlined />\r\n            </Button>\r\n          </Dropdown>\r\n        </Space>\r\n      ),\r\n    },\r\n  ];\r\n  const confirmDelete = (id: number) => {\r\n    deleteResultat(id);\r\n    onRequestFinished(\"Succès\", \"Resultat supprimé!\");\r\n  };\r\n  useEffect(() => {\r\n    fetchRequest(\"\");\r\n  }, []);\r\n\r\n  return (\r\n    <Table\r\n      loading={loading}\r\n      columns={columns}\r\n      dataSource={data}\r\n      rowKey={(record) => record.id}\r\n      className=\"responsive-table\"\r\n    />\r\n  );\r\n};\r\nconst mapStateToProps = ({ resultats }: ApplicationState) => ({\r\n  data: resultats.data,\r\n  loading: resultats.loading,\r\n});\r\n\r\nconst mapDispatchToProps = { fetchRequest, deleteResultat };\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ResultatList);\r\n",{"ruleId":"276","replacedBy":"277"},{"ruleId":"278","replacedBy":"279"},{"ruleId":"280","severity":1,"message":"281","line":2,"column":24,"nodeType":"282","messageId":"283","endLine":2,"endColumn":34},{"ruleId":"284","severity":1,"message":"285","line":49,"column":11,"nodeType":"286","endLine":52,"endColumn":13},{"ruleId":"280","severity":1,"message":"281","line":2,"column":18,"nodeType":"282","messageId":"283","endLine":2,"endColumn":28},{"ruleId":"280","severity":1,"message":"281","line":2,"column":18,"nodeType":"282","messageId":"283","endLine":2,"endColumn":28},{"ruleId":"280","severity":1,"message":"287","line":2,"column":18,"nodeType":"282","messageId":"283","endLine":2,"endColumn":23},{"ruleId":"276","replacedBy":"288"},{"ruleId":"278","replacedBy":"289"},{"ruleId":"280","severity":1,"message":"290","line":2,"column":8,"nodeType":"282","messageId":"283","endLine":2,"endColumn":20},{"ruleId":"276","replacedBy":"291"},{"ruleId":"278","replacedBy":"292"},{"ruleId":"280","severity":1,"message":"293","line":14,"column":7,"nodeType":"282","messageId":"283","endLine":14,"endColumn":17},{"ruleId":"294","severity":1,"message":"295","line":56,"column":6,"nodeType":"296","endLine":56,"endColumn":24,"suggestions":"297"},{"ruleId":"294","severity":1,"message":"298","line":66,"column":6,"nodeType":"296","endLine":66,"endColumn":15,"suggestions":"299"},{"ruleId":"300","severity":1,"message":"301","line":43,"column":11,"nodeType":"282","messageId":"302","endLine":43,"endColumn":18},{"ruleId":"300","severity":1,"message":"301","line":59,"column":11,"nodeType":"282","messageId":"302","endLine":59,"endColumn":18},{"ruleId":"300","severity":1,"message":"301","line":43,"column":11,"nodeType":"282","messageId":"302","endLine":43,"endColumn":18},{"ruleId":"300","severity":1,"message":"301","line":59,"column":11,"nodeType":"282","messageId":"302","endLine":59,"endColumn":18},{"ruleId":"300","severity":1,"message":"301","line":43,"column":11,"nodeType":"282","messageId":"302","endLine":43,"endColumn":18},{"ruleId":"300","severity":1,"message":"301","line":59,"column":11,"nodeType":"282","messageId":"302","endLine":59,"endColumn":18},{"ruleId":"280","severity":1,"message":"303","line":9,"column":9,"nodeType":"282","messageId":"283","endLine":9,"endColumn":13},{"ruleId":"280","severity":1,"message":"304","line":13,"column":26,"nodeType":"282","messageId":"283","endLine":13,"endColumn":33},{"ruleId":"305","severity":1,"message":"306","line":80,"column":33,"nodeType":"286","endLine":80,"endColumn":36},{"ruleId":"294","severity":1,"message":"307","line":122,"column":6,"nodeType":"296","endLine":122,"endColumn":8,"suggestions":"308"},{"ruleId":"280","severity":1,"message":"304","line":10,"column":26,"nodeType":"282","messageId":"283","endLine":10,"endColumn":33},{"ruleId":"305","severity":1,"message":"306","line":67,"column":33,"nodeType":"286","endLine":67,"endColumn":36},{"ruleId":"294","severity":1,"message":"307","line":109,"column":6,"nodeType":"296","endLine":109,"endColumn":8,"suggestions":"309"},{"ruleId":"280","severity":1,"message":"293","line":17,"column":7,"nodeType":"282","messageId":"283","endLine":17,"endColumn":17},{"ruleId":"294","severity":1,"message":"295","line":59,"column":6,"nodeType":"296","endLine":59,"endColumn":26,"suggestions":"310"},{"ruleId":"294","severity":1,"message":"298","line":69,"column":6,"nodeType":"296","endLine":69,"endColumn":15,"suggestions":"311"},{"ruleId":"280","severity":1,"message":"304","line":7,"column":26,"nodeType":"282","messageId":"283","endLine":7,"endColumn":33},{"ruleId":"305","severity":1,"message":"306","line":64,"column":33,"nodeType":"286","endLine":64,"endColumn":36},{"ruleId":"294","severity":1,"message":"307","line":106,"column":6,"nodeType":"296","endLine":106,"endColumn":8,"suggestions":"312"},{"ruleId":"280","severity":1,"message":"293","line":14,"column":7,"nodeType":"282","messageId":"283","endLine":14,"endColumn":17},{"ruleId":"294","severity":1,"message":"295","line":56,"column":6,"nodeType":"296","endLine":56,"endColumn":21,"suggestions":"313"},{"ruleId":"294","severity":1,"message":"298","line":68,"column":6,"nodeType":"296","endLine":68,"endColumn":15,"suggestions":"314"},{"ruleId":"300","severity":1,"message":"301","line":43,"column":11,"nodeType":"282","messageId":"302","endLine":43,"endColumn":18},{"ruleId":"300","severity":1,"message":"301","line":59,"column":11,"nodeType":"282","messageId":"302","endLine":59,"endColumn":18},{"ruleId":"300","severity":1,"message":"301","line":43,"column":11,"nodeType":"282","messageId":"302","endLine":43,"endColumn":18},{"ruleId":"300","severity":1,"message":"301","line":59,"column":11,"nodeType":"282","messageId":"302","endLine":59,"endColumn":18},{"ruleId":"280","severity":1,"message":"293","line":14,"column":7,"nodeType":"282","messageId":"283","endLine":14,"endColumn":17},{"ruleId":"294","severity":1,"message":"295","line":56,"column":6,"nodeType":"296","endLine":56,"endColumn":23,"suggestions":"315"},{"ruleId":"294","severity":1,"message":"298","line":66,"column":6,"nodeType":"296","endLine":66,"endColumn":15,"suggestions":"316"},{"ruleId":"280","severity":1,"message":"304","line":7,"column":26,"nodeType":"282","messageId":"283","endLine":7,"endColumn":33},{"ruleId":"280","severity":1,"message":"317","line":21,"column":11,"nodeType":"282","messageId":"283","endLine":21,"endColumn":21},{"ruleId":"305","severity":1,"message":"306","line":69,"column":33,"nodeType":"286","endLine":69,"endColumn":36},{"ruleId":"294","severity":1,"message":"318","line":111,"column":6,"nodeType":"296","endLine":111,"endColumn":8,"suggestions":"319"},{"ruleId":"280","severity":1,"message":"293","line":14,"column":7,"nodeType":"282","messageId":"283","endLine":14,"endColumn":17},{"ruleId":"294","severity":1,"message":"295","line":56,"column":6,"nodeType":"296","endLine":56,"endColumn":24,"suggestions":"320"},{"ruleId":"294","severity":1,"message":"298","line":66,"column":6,"nodeType":"296","endLine":66,"endColumn":15,"suggestions":"321"},{"ruleId":"280","severity":1,"message":"304","line":7,"column":26,"nodeType":"282","messageId":"283","endLine":7,"endColumn":33},{"ruleId":"305","severity":1,"message":"306","line":64,"column":33,"nodeType":"286","endLine":64,"endColumn":36},{"ruleId":"294","severity":1,"message":"307","line":106,"column":6,"nodeType":"296","endLine":106,"endColumn":8,"suggestions":"322"},"no-native-reassign",["323"],"no-negated-in-lhs",["324"],"@typescript-eslint/no-unused-vars","'Breadcrumb' is defined but never used.","Identifier","unusedVar","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'Space' is defined but never used.",["323"],["324"],"'EtudiantForm' is defined but never used.",["323"],["324"],"'tailLayout' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'form'. Either include it or remove the dependency array.","ArrayExpression",["325"],"React Hook useEffect has missing dependencies: 'isCreate', 'onRequestFinished', and 'requestSent'. Either include them or remove the dependency array. If 'onRequestFinished' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["326"],"@typescript-eslint/no-redeclare","'newData' is already defined.","redeclared","'Text' is assigned a value but never used.","'Tooltip' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","React Hook useEffect has a missing dependency: 'fetchRequest'. Either include it or remove the dependency array. If 'fetchRequest' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["327"],["328"],["329"],["330"],["331"],["332"],["333"],["334"],["335"],"'ParamTypes' is defined but never used.","React Hook useEffect has missing dependencies: 'fetchRequest' and 'id_etudiant'. Either include them or remove the dependency array. If 'fetchRequest' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["336"],["337"],["338"],["339"],"no-global-assign","no-unsafe-negation",{"desc":"340","fix":"341"},{"desc":"342","fix":"343"},{"desc":"344","fix":"345"},{"desc":"344","fix":"346"},{"desc":"347","fix":"348"},{"desc":"342","fix":"349"},{"desc":"344","fix":"350"},{"desc":"351","fix":"352"},{"desc":"342","fix":"353"},{"desc":"354","fix":"355"},{"desc":"342","fix":"356"},{"desc":"357","fix":"358"},{"desc":"359","fix":"360"},{"desc":"342","fix":"361"},{"desc":"344","fix":"362"},"Update the dependencies array to be: [form, selectedEtudiant]",{"range":"363","text":"364"},"Update the dependencies array to be: [isCreate, loading, onRequestFinished, requestSent]",{"range":"365","text":"366"},"Update the dependencies array to be: [fetchRequest]",{"range":"367","text":"368"},{"range":"369","text":"368"},"Update the dependencies array to be: [form, selectedEnseignant]",{"range":"370","text":"371"},{"range":"372","text":"366"},{"range":"373","text":"368"},"Update the dependencies array to be: [form, selectedCadre]",{"range":"374","text":"375"},{"range":"376","text":"366"},"Update the dependencies array to be: [form, selectedAbsence]",{"range":"377","text":"378"},{"range":"379","text":"366"},"Update the dependencies array to be: [fetchRequest, id_etudiant]",{"range":"380","text":"381"},"Update the dependencies array to be: [form, selectedResultat]",{"range":"382","text":"383"},{"range":"384","text":"366"},{"range":"385","text":"368"},[1513,1531],"[form, selectedEtudiant]",[1767,1776],"[isCreate, loading, onRequestFinished, requestSent]",[3214,3216],"[fetchRequest]",[2916,2918],[1559,1579],"[form, selectedEnseignant]",[1819,1828],[2830,2832],[1456,1471],"[form, selectedCadre]",[1751,1760],[1494,1511],"[form, selectedAbsence]",[1745,1754],[3071,3073],"[fetchRequest, id_etudiant]",[1513,1531],"[form, selectedResultat]",[1767,1776],[2866,2868]]